import 'package:dio/dio.dart';

class DioExceptionHandler {
  // Singleton instance
  static final DioExceptionHandler _instance = DioExceptionHandler._internal();

  // Private constructor
  DioExceptionHandler._internal();

  // Getter to access the singleton instance
  static DioExceptionHandler get instance => _instance;

  // Enable or disable logging
  bool enableLogging = false;

  // Method to handle Dio errors with Arabic messages
  String handle(DioException error) {
    if (enableLogging) {
      print('DioException: ${error.type}, Message: ${error.message}');
    }

    switch (error.type) {
      case DioExceptionType.connectionTimeout:
        return 'Ø§Ù†ØªÙ‡Øª Ù…Ù‡Ù„Ø© Ø§Ù„Ø§ØªØµØ§Ù„. Ø­Ø§ÙˆÙ„ Ù…Ø±Ø© Ø£Ø®Ø±Ù‰.';
      case DioExceptionType.sendTimeout:
        return 'Ø§Ù†ØªÙ‡Øª Ù…Ù‡Ù„Ø© Ø§Ù„Ø¥Ø±Ø³Ø§Ù„. Ø­Ø§ÙˆÙ„ Ù…Ø±Ø© Ø£Ø®Ø±Ù‰.';
      case DioExceptionType.receiveTimeout:
        return 'Ø§Ù†ØªÙ‡Øª Ù…Ù‡Ù„Ø© Ø§Ù„Ø§Ø³ØªÙ„Ø§Ù…. Ø­Ø§ÙˆÙ„ Ù…Ø±Ø© Ø£Ø®Ø±Ù‰.';
      case DioExceptionType.badResponse:
        return _handleBadResponse(error.response);
      case DioExceptionType.cancel:
        return 'ØªÙ… Ø¥Ù„ØºØ§Ø¡ Ø§Ù„Ø·Ù„Ø¨.';
      case DioExceptionType.unknown:
      default:
        return 'Ø­Ø¯Ø« Ø®Ø·Ø£ ØºÙŠØ± Ù…ØªÙˆÙ‚Ø¹: ${error.message}';
    }
  }

  String _handleBadResponse(Response? response) {
    final statusCode = response?.statusCode ?? 0;
    final message = response?.statusMessage ?? 'Ù„Ø§ ØªÙˆØ¬Ø¯ Ø±Ø³Ø§Ù„Ø© Ù…Ù† Ø§Ù„Ø®Ø§Ø¯Ù…';

    if (enableLogging) {
      print('ðŸ“¡ HTTP $statusCode: $message');
    }

    if (statusCode >= 400 && statusCode < 500) {
      return 'Ø®Ø·Ø£ Ù…Ù† Ø§Ù„Ø¹Ù…ÙŠÙ„ [$statusCode]: $message';
    } else if (statusCode >= 500) {
      return 'Ø®Ø·Ø£ Ù…Ù† Ø§Ù„Ø®Ø§Ø¯Ù… [$statusCode]: $message';
    } else {
      return 'Ø§Ø³ØªØ¬Ø§Ø¨Ø© ØºÙŠØ± Ù…ØªÙˆÙ‚Ø¹Ø© [$statusCode]: $message';
    }
  }
}
